/**
 *  Copyright 2025 Angus.Fenying <fenying@litert.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

import * as TyG from '@litert/typeguard';
import * as NodeFS from 'node:fs';

const compiler = TyG.createCompiler(TyG.createJavaScriptLanguageBuilder());

const OUT_FILE = `${__dirname}/../src/lib/ApiSchema/ExecutorApiSchema.Validation.ts`;
const fd = NodeFS.openSync(OUT_FILE, 'w');

NodeFS.writeSync(
    fd,
    [
`/**
 *  Copyright 2025 Angus.Fenying <fenying@litert.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
`,
        `/* eslint-disable */`,
        `/* Generated by @litert/typeguard (script: ../../tools/generate-args-validation-code.ts) */`,
        `import type * as dT from './ExecutorApiSchema';`,
        '',
        '',
    ].join('\n')
);

for (const item of [
    {
        fnName: 'isValidKillJobArgs',
        typeName: 'IKillJobArgs',
        rule: {
            jobId: 'uint',
        }
    },
    {
        fnName: 'isValidDetectJobArgs',
        typeName: 'IDetectJobArgs',
        rule: {
            jobId: 'uint',
        }
    },
    {
        fnName: 'isValidQueryJobLogArgs',
        typeName: 'IQueryJobLogArgs',
        rule: {
            logId: 'uint',
            logDateTim: 'uint',
            fromLineNum: 'uint',
        }
    },
    {
        fnName: 'isValidRunJobArgs',
        typeName: 'IRunJobArgs',
        rule: {
            jobId: 'uint',
            executorHandler: 'string',
            executorParams: ['string', null],
            executorBlockStrategy: 'string',
            executorTimeout: 'uint',
            logId: 'uint',
            logDateTime: 'uint',
            glueType: 'string',
            glueSource: ['string', null],
            glueUpdatetime: 'uint',
        }
    },
]) {

    const result = compiler.compile({
        rule: item.rule
    });

    NodeFS.writeSync(
        fd,
        [
            `export function ${item.fnName}(${result.arguments[0].name}: any): ${result.arguments[0].name} is dT.${item.typeName} {`,
            '    return ' + result.source,
            '}',
            '',
            '',
        ].join('\n')
    );
}

NodeFS.closeSync(fd);

console.log(`Generated validation code in ${OUT_FILE}`);